.PHONY: all up down plan stage demo clean

# Start all background services (Graphiti, MCP servers)
up:
	@echo "🚀 Starting infrastructure..."
	docker compose up -d
	opencode serve &

# Stop all services
down:
	@echo "🛑 Stopping all services..."
	docker compose down --volumes
	killall opencode || true # Use 'true' to prevent error if process not found

# Act I: Generate the sprint plan
plan:
	@echo "🤖 Act I: Generating sprint plan with @task-master..."
	/Users/bigmrrob/.bun/bin/claude --dangerously-skip-permissions "> First, write this PRD to .taskmaster/docs/prd.txt: '---\nid: prd-ai-sneaker-customizer\ntitle: \"AI Sneaker Customizer – Design Your Own Air\"\nversion: 0.2.0\nstatus: reviewed\nstage: draft\nlastUpdated: 2025-07-27\nowner: \"@product\"\nstakeholders: [\"@product\", \"@orchestrator\", \"@ui-agent\", \"@api-agent\", \"@data-agent\", \"@qa-agent\"]\n---\n\n# 1. Title & Date\n**Product Requirements Document: AI Sneaker Customizer – \"Design Your Own Air\"**\n**Date:** 2025-07-27\n\n# 2. Objective / Elevator Pitch\nTo build a V1 internal web application, \"Kicks AI,\" that allows Nike designers and marketers to rapidly prototype new sneaker designs by using generative AI to create and apply unique textures to a 3D model in real-time. The goal is to accelerate the conceptual design phase, store promising designs, and share them internally for instant feedback.\n\n# 3. Success Metrics\n\n### Experience KPIs\n- **Time to Texture:** p95 latency from prompt submission to 3D model update is < 8 seconds.\n- **Time to Save:** p95 latency from clicking \"Save\" to receiving a shareable link is < 2 seconds.\n- **Audience Wow Factor:** At least 80% of the live demo audience raises their hand when polled about the impressiveness of the real-time generation.\n\n### System KPIs\n- **API Reliability:** The `generateDesign` Convex action has a success rate > 99%.\n- **Error Budget:** The overall application will maintain a 99% availability, with a 5xx error budget of < 1% from Convex services.\n\n### Demo KPIs\n- **P0 Completion:** All P0 user stories are successfully implemented and demonstrated by the AI agent fleet.\n\n# 4. Target Audience / Personas\n- **Priya, the Footwear Designer:** Needs to quickly iterate on creative ideas for materials and patterns without manual mockups.\n- **David, the Product Line Manager:** Needs to see high-fidelity concepts to evaluate market viability for the next season.\n- **Maria, the Marketing Strategist:** Needs compelling visuals for internal pitches and campaign mood boards.\n\n# 5. User Stories\n\n| ID    | Priority | Story                                                              | Acceptance Criteria (Gherkin Style)                                                                                                                                                           |\n| :---- | :------- | :----------------------------------------------------------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| US-01 | P0       | As a designer, I can enter a text prompt to describe a sneaker texture. | **GIVEN** I am on the Customizer page<br>**WHEN** I type \"carbon fiber with orange stitching\" into the prompt input<br>**THEN** the \"Generate\" button becomes enabled.                               |\n| US-02 | P0       | As a designer, I can see the AI-generated texture applied to a 3D model. | **GIVEN** I have entered a valid prompt<br>**WHEN** I click \"Generate\"<br>**THEN** I see a loading indicator, and within 8 seconds the 3D shoe model'\''s texture updates to match the prompt.        |\n| US-03 | P0       | As a designer, I can save my design to a shared gallery.               | **GIVEN** a texture has been successfully generated<br>**WHEN** I click the \"Save Design\" button<br>**THEN** a Convex mutation is called and a success notification with a shareable link appears. |\n| US-04 | P1       | As a user, I can see a real-time feed of recently saved designs.     | **GIVEN** I am on the Customizer page<br>**WHEN** another user saves a new design<br>**THEN** the gallery section updates automatically to show the new design without a page refresh.             |\n| US-05 | P1       | As a user, I can interact with the 3D shoe model.                  | **GIVEN** the 3D model is visible<br>**WHEN** I click and drag my mouse<br>**THEN** the model rotates. <br>**AND WHEN** I use the scroll wheel<br>**THEN** the model zooms in and out.                |\n| US-06 | P1       | As a user, I can download a PNG snapshot of my design.             | **GIVEN** a design is displayed on the 3D model<br>**WHEN** I click the \"Download\" button<br>**THEN** a PNG file of the current 3D viewer canvas is downloaded to my device.                     |\n\n# 6. Functional Requirements\n- **FR-01: Prompt Panel:** A `<PromptPanel />` component will provide a text area for user input and a submit button.\n- **FR-02: Texture Generation Service:** A Convex `action` with the following contract must be implemented:\n  ### API Contract\n  ```ts\n  // convex/actions/generateDesign.ts\n  interface GenerateDesignArgs { prompt: string }\n  interface GenerateDesignResult {\n    textureUrl: string;        // Public URL to a 1024×1024 PNG in Convex Storage\n    palette: string[];         // Array of 5 HEX color codes from the texture\n  }\n  ```\n- **FR-03: 3D Viewer Component:** A `<ShoeViewer />` component built with React Three Fiber will render the shoe.glb model. It must accept the following props:\n  ```ts\n  <ShoeViewer model=\"/shoe.glb\" texture={textureUrl} envPreset=\"studio\" />\n  ```\n- **FR-04: Design Persistence:** A Convex mutation `saveDesign(promptText, textureUrl)` will persist the design to the designs table.\n- **FR-05: Real-time Gallery:** A Convex query `listDesigns()` will provide a real-time subscription to the designs table.\n- **FR-06: PNG Snapshot:** The `<ShoeViewer />` component must expose a utility function that can be called to get a dataURL of the canvas for downloading.\n- **FR-07: CDN Image Proxy:** All generated textures stored in Convex Storage should be served through a CDN (e.g., Vercel Images) to meet latency NFRs. This may require a Next.js route handler.\n\n# 7. Non-Functional Requirements\n- **NFR-01: Performance Budget:**\n  - Initial JS load (gzipped): ≤ 150 kB.\n  - 3D Model: Triangle count ≤ 150k.\n- **NFR-02: Accessibility:**\n  - The 3D viewer must be operable via keyboard arrow keys for rotation.\n  - The \"R\" key must reset the camera to its default position.\n  - All UI colors must meet WCAG AA contrast ratios.\n\n# 8. Tech Stack / Architectural Notes\n- **Frontend:** Next.js 14 (App Router), RSC, TypeScript, Tailwind CSS, ShadCN UI.\n- **3D:** @react-three/fiber, @react-three/drei.\n- **Backend:** Convex (Database, Mutations, Queries, Actions, Storage).\n- **Generative AI:** OpenAI DALL-E 3.\n\n### Event Flow:\n1. UI (`<PromptPanel />`) captures user prompt.\n2. Client calls Convex action (`generateDesign`).\n3. Action calls OpenAI API.\n4. Action stores the resulting image in Convex Storage.\n5. Action returns `textureUrl` and `palette` to the client.\n6. UI (`<ShoeViewer />`) receives new `textureUrl` and updates the 3D model.\n\n# 9. Constraints / Out-of-Scope\n- **Data Privacy:** No personal user data will be persisted; GDPR is not triggered.\n- **Authentication:** No multi-tenant auth. All designs are public within the tool.\n- **Functionality:** No payments, inventory, or e-commerce features. V1 supports only one 3D model and single-texture designs.\n\n# 10. Risks & Mitigations\n- **Risk:** DALL-E 3 API latency exceeds 8s target. **Mitigation:** Implement a clear loading state; have fallback textures ready for the demo.\n- **Risk:** Texture seams or mapping issues on the GLB model'\''s UV map. **Mitigation:** The @ui-agent should flag this issue if it occurs; a 3D artist may be needed for V2.\n- **Risk:** WebGL2 is not supported on the presentation device. **Mitigation:** The `<ShoeViewer />` will implement a fallback to display a static `<img>` tag.\n\n# 11. Milestones\n| Milestone | Target Time | Key User Stories | Primary Agent |\n|-----------|-------------|------------------|---------------|\n| M1: Data & API Foundations | T-180 min | US-01, US-03 | @data-agent, @api-agent |\n| M2: Core Visual Experience | T-120 min | US-02, US-05 | @ui-agent |\n| M3: Real-time & Sharing | T-60 min | US-04, US-06 | @ui-agent |\n| M4: Final QA & Polish | T-30 min | All | @qa-agent |\n\n# 12. Appendix\n**Sample generateDesign Payload:**\n```json\n{\n  \"textureUrl\": \"https://<your-convex-project>.convex.site/api/storage/...\",\n  \"palette\": [\"#FF5733\", \"#33FF57\", \"#3357FF\", \"#FFFF33\", \"#FF33FF\"]\n}\n```' Then use the taskmaster-ai_parse_prd tool with projectRoot='/Users/bigmrrob/ai-sandbox' and input='/Users/bigmrrob/ai-sandbox/.taskmaster/docs/prd.txt' to parse it. The tool will automatically create the tasks in the .taskmaster/tasks/ folder."

# Act II: Stage the plan onto Vibe Kanban
stage:
	@echo "📊 Act II: Staging tasks onto Vibe Kanban..."
	/Users/bigmrrob/.bun/bin/claude --dangerously-skip-permissions "> Read the tasks from .taskmaster/tasks/tasks.json and create each task in Vibe Kanban using the vibe_kanban_create_task MCP tool. Use project_id='7b553861-1280-4132-8f7c-be6e2b240828'. For each task, set the title from the task title, and create a description that includes the task description, details, priority, and dependencies. Assign owners based on task type: database/schema tasks to @data-agent, API/backend tasks to @api-agent, UI/frontend tasks to @ui-agent, and testing/documentation tasks to @qa-agent."

# Act III: Execute the sprint
demo:
	@echo "🎬 Act III: Executing sprint with @orchestrator..."
	/Users/bigmrrob/.bun/bin/claude --dangerously-skip-permissions "> Use the orchestrator sub agent to execute the full sprint from the Vibe Kanban board."

# Show current tasks
show:
	@echo "📋 Current tasks in TaskMaster AI:"
	@if [ -f .taskmaster/tasks/tasks.json ]; then \
		cat .taskmaster/tasks/tasks.json | jq '.tasks[] | {id, title, status, priority}' 2>/dev/null || cat .taskmaster/tasks/tasks.json; \
	else \
		echo "❌ No tasks found. Run 'make plan' first!"; \
	fi

# Clean up demo artifacts
clean:
	@echo "🧹 Cleaning up worktrees and tasks.json..."
	rm -f tasks.json
	# This command is powerful. It force-removes all git worktrees.
	git worktree list | awk '{print $1}' | xargs -I {} git worktree remove {} --force